import unittest
import importlib

class TestFinal(unittest.TestCase):
    def test_01_ManipulateArgs(self):
        manipulate_args = asgmt.ManipulateArgs(3, 2, 7, 5, 11)
        self.assertEqual(manipulate_args.sort_asc(), [2, 3, 5, 7, 11])
        self.assertEqual(manipulate_args.sort_desc(), [11, 7, 5, 3, 2])
        self.assertEqual(manipulate_args.reverse(), [11, 5, 7, 2, 3])
        manipulate_args = asgmt.ManipulateArgs(1, 2, 3)
        self.assertEqual(manipulate_args.sort_asc(), [1, 2, 3])
        self.assertEqual(manipulate_args.sort_desc(), [3, 2, 1])
        self.assertEqual(manipulate_args.reverse(), [3, 2, 1])
    def test_02_KeyValueMethods(self):
        key_value_methods = asgmt.KeyValueMethods(twn="Taiwan")
        self.assertEqual(key_value_methods.reverse(), {'Taiwan': 'twn'})
        self.assertEqual(key_value_methods.to_upper(), {'TWN': 'TAIWAN'})
        self.assertEqual(key_value_methods.to_lower(), {'twn': 'taiwan'})
        key_value_methods = asgmt.KeyValueMethods(twn="Taiwan", jpn="Japan")
        self.assertEqual(key_value_methods.reverse(), {'Taiwan': 'twn', 'Japan': 'jpn'})
        self.assertEqual(key_value_methods.to_upper(), {'TWN': 'TAIWAN', 'JPN': 'JAPAN'})
        self.assertEqual(key_value_methods.to_lower(), {'twn': 'taiwan', 'jpn': 'japan'})
    def test_03_SequenceGenerator(self):
        sequence_generator = asgmt.SequenceGenerator(5)
        self.assertEqual(sequence_generator.get_evens(), [0, 2, 4, 6, 8])
        self.assertEqual(sequence_generator.get_odds(), [1, 3, 5, 7, 9])
        sequence_generator = asgmt.SequenceGenerator(7)
        self.assertEqual(sequence_generator.get_evens(), [0, 2, 4, 6, 8, 10, 12])
        self.assertEqual(sequence_generator.get_odds(), [1, 3, 5, 7, 9, 11, 13])
        sequence_generator = asgmt.SequenceGenerator(3)
        self.assertEqual(sequence_generator.get_evens(), [0, 2, 4])
        self.assertEqual(sequence_generator.get_odds(), [1, 3, 5])
    def test_04_get_primes(self):
        self.assertEqual(asgmt.get_primes(3), [2, 3, 5])
        self.assertEqual(asgmt.get_primes(5), [2, 3, 5, 7, 11])
        self.assertEqual(asgmt.get_primes(7), [2, 3, 5, 7, 11, 13, 17])
        self.assertEqual(asgmt.get_primes(8), [2, 3, 5, 7, 11, 13, 17, 19])
        self.assertEqual(asgmt.get_primes(9), [2, 3, 5, 7, 11, 13, 17, 19, 23])
    def test_05_get_fibonacci(self):
        self.assertEqual(asgmt.get_fibonacci(3), [0, 1, 1])
        self.assertEqual(asgmt.get_fibonacci(5), [0, 1, 1, 2, 3])
        self.assertEqual(asgmt.get_fibonacci(7), [0, 1, 1, 2, 3, 5, 8])
        self.assertEqual(asgmt.get_fibonacci(8), [0, 1, 1, 2, 3, 5, 8, 13])
        self.assertEqual(asgmt.get_fibonacci(9), [0, 1, 1, 2, 3, 5, 8, 13, 21])
    def test_06_AdvancedSequenceGenerator(self):
        sequence_generator = asgmt.AdvancedSequenceGenerator(5)
        self.assertEqual(sequence_generator.get_evens(), [0, 2, 4, 6, 8])
        self.assertEqual(sequence_generator.get_odds(), [1, 3, 5, 7, 9])
        self.assertEqual(sequence_generator.get_primes(), [2, 3, 5, 7, 11])
        self.assertEqual(sequence_generator.get_fibonacci(), [0, 1, 1, 2, 3])
        sequence_generator = asgmt.AdvancedSequenceGenerator(7)
        self.assertEqual(sequence_generator.get_evens(), [0, 2, 4, 6, 8, 10, 12])
        self.assertEqual(sequence_generator.get_odds(), [1, 3, 5, 7, 9, 11, 13])
        self.assertEqual(sequence_generator.get_primes(), [2, 3, 5, 7, 11, 13, 17])
        self.assertEqual(sequence_generator.get_fibonacci(), [0, 1, 1, 2, 3, 5, 8])
        sequence_generator = asgmt.AdvancedSequenceGenerator(3)
        self.assertEqual(sequence_generator.get_evens(), [0, 2, 4])
        self.assertEqual(sequence_generator.get_odds(), [1, 3, 5])
        self.assertEqual(sequence_generator.get_primes(), [2, 3, 5])
        self.assertEqual(sequence_generator.get_fibonacci(), [0, 1, 1])
    def test_07_factorial(self):
        self.assertEqual(asgmt.factorial(0), 1)
        self.assertEqual(asgmt.factorial(1), 1)
        self.assertEqual(asgmt.factorial(2), 2)
        self.assertEqual(asgmt.factorial(3), 6)
        self.assertEqual(asgmt.factorial(4), 24)
        self.assertEqual(asgmt.factorial(5), 120)
        self.assertEqual(asgmt.factorial(6), 720)
    def test_08_get_optimal_change(self):
        self.assertEqual(asgmt.get_optimal_change(35, 50), {500: 0, 100: 0, 50: 0, 10: 1, 5: 1, 1: 0})
        self.assertEqual(asgmt.get_optimal_change(69, 100), {500: 0, 100: 0, 50: 0, 10: 3, 5: 0, 1: 1})
        self.assertEqual(asgmt.get_optimal_change(124, 150), {500: 0, 100: 0, 50: 0, 10: 2, 5: 1, 1: 1})
        self.assertEqual(asgmt.get_optimal_change(124, 200), {500: 0, 100: 0, 50: 1, 10: 2, 5: 1, 1: 1})
        self.assertEqual(asgmt.get_optimal_change(124, 500), {500: 0, 100: 3, 50: 1, 10: 2, 5: 1, 1: 1})
        self.assertEqual(asgmt.get_optimal_change(124, 1000), {500: 1, 100: 3, 50: 1, 10: 2, 5: 1, 1: 1})
        self.assertEqual(asgmt.get_optimal_change(1124, 1500), {500: 0, 100: 3, 50: 1, 10: 2, 5: 1, 1: 1})
        self.assertEqual(asgmt.get_optimal_change(1124, 2000), {500: 1, 100: 3, 50: 1, 10: 2, 5: 1, 1: 1})
        self.assertEqual(asgmt.get_optimal_change(95, 100), {500: 0, 100: 0, 50: 0, 10: 0, 5: 1, 1: 0})
        self.assertEqual(asgmt.get_optimal_change(84, 100), {500: 0, 100: 0, 50: 0, 10: 1, 5: 1, 1: 1})
        self.assertEqual(asgmt.get_optimal_change(43, 50), {500: 0, 100: 0, 50: 0, 10: 0, 5: 1, 1: 2})
    def test_09_rotate_character(self):
        self.assertEqual(asgmt.rotate_character("A"), 'N')
        self.assertEqual(asgmt.rotate_character("B"), 'O')
        self.assertEqual(asgmt.rotate_character("L"), 'Y')
        self.assertEqual(asgmt.rotate_character("M"), 'Z')
        self.assertEqual(asgmt.rotate_character("a"), 'n')
        self.assertEqual(asgmt.rotate_character("b"), 'o')
        self.assertEqual(asgmt.rotate_character("l"), 'y')
        self.assertEqual(asgmt.rotate_character("m"), 'z')
        self.assertEqual(asgmt.rotate_character("N"), 'A')
        self.assertEqual(asgmt.rotate_character("O"), 'B')
        self.assertEqual(asgmt.rotate_character("Y"), 'L')
        self.assertEqual(asgmt.rotate_character("Z"), 'M')
        self.assertEqual(asgmt.rotate_character("n"), 'a')
        self.assertEqual(asgmt.rotate_character("o"), 'b')
        self.assertEqual(asgmt.rotate_character("y"), 'l')
        self.assertEqual(asgmt.rotate_character("z"), 'm')
    def test_10_rotate_sentence(self):
        self.assertEqual(asgmt.rotate_sentence("Abj vf orggre guna arire."), 'Now is better than never.')
        self.assertEqual(asgmt.rotate_sentence("Now is better than never."), 'Abj vf orggre guna arire.')
        self.assertEqual(asgmt.rotate_sentence("Rkcyvpvg vf orggre guna vzcyvpvg."), 'Explicit is better than implicit.')
        self.assertEqual(asgmt.rotate_sentence("Explicit is better than implicit."), 'Rkcyvpvg vf orggre guna vzcyvpvg.')
    def test_11_Rot13(self):
        rot13 = asgmt.Rot13()
        self.assertEqual(rot13.rotate_character("A"), 'N')
        self.assertEqual(rot13.rotate_character("B"), 'O')
        self.assertEqual(rot13.rotate_character("C"), 'P')
        self.assertEqual(rot13.rotate_character("K"), 'X')
        self.assertEqual(rot13.rotate_character("L"), 'Y')
        self.assertEqual(rot13.rotate_character("M"), 'Z')
        self.assertEqual(rot13.rotate_character("a"), 'n')
        self.assertEqual(rot13.rotate_character("b"), 'o')
        self.assertEqual(rot13.rotate_character("c"), 'p')
        self.assertEqual(rot13.rotate_character("k"), 'x')
        self.assertEqual(rot13.rotate_character("l"), 'y')
        self.assertEqual(rot13.rotate_character("m"), 'z')
        self.assertEqual(rot13.rotate_sentence("Abj vf orggre guna arire."), 'Now is better than never.')
        self.assertEqual(rot13.rotate_sentence("Now is better than never."), 'Abj vf orggre guna arire.')
        self.assertEqual(rot13.rotate_sentence("Rkcyvpvg vf orggre guna vzcyvpvg."), 'Explicit is better than implicit.')
        self.assertEqual(rot13.rotate_sentence("Explicit is better than implicit."), 'Rkcyvpvg vf orggre guna vzcyvpvg.')
        self.assertEqual(rot13.rotate_sentence("ABCKLM"), 'NOPXYZ')
        self.assertEqual(rot13.rotate_sentence("abcklm"), 'nopxyz')
    def test_12_Friends(self):
        friends = asgmt.Friends()
        self.assertEqual(friends.get_actor("Rachel Green"), 'Jennifer Aniston')
        self.assertEqual(friends.get_actor("Monica Geller"), 'Courteney Cox')
        self.assertEqual(friends.get_actor("Phoebe Buffay"), 'Lisa Kudrow')
        self.assertEqual(friends.get_character("Jennifer Aniston"), 'Rachel Green')
        self.assertEqual(friends.get_character("Courteney Cox"), 'Monica Geller')
        self.assertEqual(friends.get_character("Lisa Kudrow"), 'Phoebe Buffay')
        self.assertEqual(friends.get_actor("Joey Tribbiani"), 'Matt LeBlanc')
        self.assertEqual(friends.get_actor("Chandler Bing"), 'Matthew Perry')
        self.assertEqual(friends.get_actor("Ross Geller"), 'David Schwimmer')
        self.assertEqual(friends.get_character("Matt LeBlanc"), 'Joey Tribbiani')
        self.assertEqual(friends.get_character("Matthew Perry"), 'Chandler Bing')
        self.assertEqual(friends.get_character("David Schwimmer"), 'Ross Geller')
    def test_13_import_mlb_teams_json(self):
        mlb_teams = asgmt.import_mlb_teams_json()
        self.assertIsInstance(mlb_teams, list)
        self.assertEqual(len(mlb_teams), 30)
    def test_14_find_teams_ballpark(self):
        self.assertEqual(asgmt.find_teams_ballpark("Boston Red Sox"), 'Fenway Park')
        self.assertEqual(asgmt.find_teams_ballpark("New York Yankees"), 'Yankee Stadium')
        self.assertEqual(asgmt.find_teams_ballpark("Los Angeles Dodgers"), 'Dodger Stadium')
        self.assertEqual(asgmt.find_teams_ballpark("Los Angeles Angels"), 'Angel Stadium')
        self.assertEqual(asgmt.find_teams_ballpark("Baltimore Orioles"), 'Oriole Park')
    def test_15_find_ballpark_full_address(self):
        self.assertEqual(asgmt.find_ballpark_full_address("Boston Red Sox"), '4 Jersey Street, Boston, MA, United States')
        self.assertEqual(asgmt.find_ballpark_full_address("New York Yankees"), 'One East 161st Street, Bronx, NY, United States')
        self.assertEqual(asgmt.find_ballpark_full_address("Los Angeles Dodgers"), '1000 Vin Scully Avenue, Los Angeles, CA, United States')
        self.assertEqual(asgmt.find_ballpark_full_address("Los Angeles Angels"), '2000 Gene Autry Way, Anaheim, CA, United States')
        self.assertEqual(asgmt.find_ballpark_full_address("Baltimore Orioles"), '333 West Camden Street, Baltimore, MD, United States')
    def test_16_import_imdb_files(self):
        out = asgmt.import_imdb_files()
        self.assertIsInstance(out, tuple)
        self.assertEqual(len(out), 4)
    def test_17_find_the_shawshank_redemption_release_info(self):
        the_shawshank_redemption_release_info = asgmt.find_the_shawshank_redemption_release_info()
        self.assertEqual(the_shawshank_redemption_release_info.shape, (68, 3))
        titles = the_shawshank_redemption_release_info.iloc[:, 0].to_list()
        self.assertIn("The Shawshank Redemption", titles)
        countries = the_shawshank_redemption_release_info.iloc[:, 1].to_list()
        self.assertIn("Taiwan", countries)
        self.assertIn("United States", countries)
    def test_18_find_the_shawshank_redemption_release_info_in_taiwan(self):
        self.assertEqual(asgmt.find_the_shawshank_redemption_release_info_in_taiwan("1st"), "1995-03-10")
        self.assertEqual(asgmt.find_the_shawshank_redemption_release_info_in_taiwan("2nd"), "2020-03-13")
    def test_19_find_movies_directed_by_nolan_spielberg(self):
        movies_directed_by_nolan_spielberg = asgmt.find_movies_directed_by_nolan_spielberg()
        self.assertEqual(movies_directed_by_nolan_spielberg.shape, (15, 2))
        self.assertIn("Interstellar", movies_directed_by_nolan_spielberg["title"].values)
        self.assertIn("The Dark Knight", movies_directed_by_nolan_spielberg["title"].values)
        self.assertIn("Jurassic Park", movies_directed_by_nolan_spielberg["title"].values)
        self.assertIn("Catch Me If You Can", movies_directed_by_nolan_spielberg["title"].values)
    def test_20_find_movies_with_multiple_directors(self):
        movies_with_multiple_directors = asgmt.find_movies_with_multiple_directors()
        self.assertIn("Avengers: Endgame", movies_with_multiple_directors["title"].values)
        self.assertIn("Avengers: Infinity War", movies_with_multiple_directors["title"].values)
        self.assertIn("Anthony Russo", movies_with_multiple_directors["director"].values)
        self.assertIn("Joe Russo", movies_with_multiple_directors["director"].values)

asgmt = importlib.import_module("asgmt")
suite = unittest.TestLoader().loadTestsFromTestCase(TestFinal)
runner = unittest.TextTestRunner(verbosity=2)
test_results = runner.run(suite)
number_of_failures = len(test_results.failures)
number_of_errors = len(test_results.errors)
number_of_test_runs = test_results.testsRun
number_of_successes = number_of_test_runs - (number_of_failures + number_of_errors)
print("You've got {} successes among {} questions.".format(number_of_successes, number_of_test_runs))